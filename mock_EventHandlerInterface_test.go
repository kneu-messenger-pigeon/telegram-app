// Code generated by mockery v2.20.2. DO NOT EDIT.

package main

import mock "github.com/stretchr/testify/mock"

// MockEventHandlerInterface is an autogenerated mock type for the EventHandlerInterface type
type MockEventHandlerInterface struct {
	mock.Mock
}

// Commit provides a mock function with given fields:
func (_m *MockEventHandlerInterface) Commit() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetExpectedEventType provides a mock function with given fields:
func (_m *MockEventHandlerInterface) GetExpectedEventType() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// GetExpectedMessageKey provides a mock function with given fields:
func (_m *MockEventHandlerInterface) GetExpectedMessageKey() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Handle provides a mock function with given fields: event
func (_m *MockEventHandlerInterface) Handle(event interface{}) error {
	ret := _m.Called(event)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockEventHandlerInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEventHandlerInterface creates a new instance of MockEventHandlerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEventHandlerInterface(t mockConstructorTestingTNewMockEventHandlerInterface) *MockEventHandlerInterface {
	mock := &MockEventHandlerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
